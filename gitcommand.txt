git init - Arquivos dentro de uma pasta que deverao esta no repositorio do github, entretanto o repositorio ainda nao tem sido criado. 
 	Todas as alteracoes que forem ocorrer dentro dessa pasta o git vai te informat o que tem acontecido.

git status - Comando que mostra os estado dos arquivos
		On branch master - ainda para ser falado
		no commits yet - ainda para ser falado
		Untracked files - arquivos que precisam ser monitorados para que se houver mudanca o status possa 
	nos avisar, para isso se deve por **git add <nome do arquivo>** ou por **git add .** para adicionar todos
	os arquivos da pasta.

git rm --cached <nome do arquivo> - Caso queira deixar de observar o arquivo caso haja alteracao. 

git commit -m "MENSAGEM" - Commit deve ser criado com uma mensagem com o proposito do commit que esta sendo 
executado.

git log - Para ter as informacoes dos commits e suas mensagem junto com os autores 

.gitignore - Arquivo criado para ignorar arquivos que nao precisam ser observados, dentro dele vc deve colocar o nome
do arquivo

Repositorio Remoto - Local ou Servidor onde as pessoas possam enviar essas alteracoes e suas buscas.

git init --bare - inicia um repositorio que vai servir como remoto.


/*** Como este servidor será um repositório do Git que somente armazenará as alterações, ou seja, 
não o acessaremos para editar arquivos, por exemplo, usaremos git init --bare, cujo parâmetro indica 
que este repositório é puro, que contém apenas as alterações dos arquivos, e não uma cópia física de
cada um dos arquivos. ***/

/***E preciso que a pasta onde contem os arquivos conheca o repositorio remoto, para que por fim 
essas alteracoes sejam enviadas para essa pasta remota.***

git remote add <nome> <endereco onde esta o repositorio remoto>

git clone <endereco de onde quer clonar> <nome que sera da para a pasta clonada>

git push <nome da maquina> <nome do branch>
git pull <nome da maquina> <nome do branch>

git branch <nome da branch> - Quando um colega de trabalho esta trabalhando em um mesmo codigo, normalmente é
precio que seja criado ramificações para que não haja conflito de no código.

git checkout <nome da branch> - Muda de uma branch para outra

git merge <nome da branch que irá se juntar> - Quando o trabalho de uma ramificação é terminado, ela precisa 
juntar  com a ramificação <master> desta forma é preciso fazer um **git checkout master** e então utilizar 
do marge coma branch que queria se juntar

git rebase <nome da branch que queria se juntar> - Para se manter uma organização no **git log** é preciso 
se fazer o rebase, ele irá utilizar da branch master, vai commitar com as commits da branch que precisa fazer 
o merge e irá realizar apenas um commit.

segunda alteracao dentro do master

